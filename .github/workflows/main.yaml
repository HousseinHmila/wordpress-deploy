name: Deploy to AWS

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: eu-north-1
          role-to-assume: ${{ secrets.OIDC_ROLE }}
          audience: sts.amazonaws.com

      - name: Run Terraform
        run: |
          cd src
          terraform init
          terraform apply -auto-approve

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.30.0/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Check kubectl version
        run: kubectl version --client

      - name: Check AWS CLI version
        run: aws --version

      - name: Update kubeconfig
        run: |
          # Update kubeconfig to use the correct context
          aws eks update-kubeconfig --name poly-cluster

          # Verify the current context
          kubectl config get-contexts
          kubectl config current-context
      - name: display config
        run: |
          cat ~/.kube/config
      - name: Deploy S3 pod
        run: |
          kubectl apply -f kube_manifest/s3_pod.yaml
      - name: Install ArgoCD
        run: |
          kubectl apply -f kube_manifest/ns.yaml
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          kubectl apply -f kube_manifest/argo_secret_auth.yaml
          kubectl apply -f kube_manifest/argo_config.yaml
      - name: setup argocd svc
        run: |
          kubectl patch svc argocd-server -n argocd --type='json' -p='[{"op": "replace", "path": "/spec/type", "value": "NodePort"}]'
          kubectl get svc argocd-server -n argocd
      - name: Destroy Terraform resources
        if: github.event_name == 'workflow_dispatch'
        run: |
          cd src
          terraform init
          terraform destroy -auto-approve
