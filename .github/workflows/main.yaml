name: Deploy to AWS

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: eu-north-1
          role-to-assume: ${{ secrets.OIDC_ROLE }}
          audience: sts.amazonaws.com

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.30.0/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Check kubectl version
        run: kubectl version --client

      - name: Check AWS CLI version
        run: aws --version

      - name: Check current authentication mode
        id: check-auth-mode
        run: |
          # Check if authentication mode is API_AND_CONFIG_MAP
          CURRENT_AUTH_MODE=$(aws eks describe-cluster --name poly-cluster --query 'cluster.authenticationConfig.authenticationMode' --output text)

          if [ "$CURRENT_AUTH_MODE" != "API_AND_CONFIG_MAP" ]; then
            echo "Authentication mode is not API_AND_CONFIG_MAP. Proceeding with update."
            echo "update_needed=true" >> $GITHUB_ENV
          else
            echo "Authentication mode is already API_AND_CONFIG_MAP. No update needed."
            echo "update_needed=false" >> $GITHUB_ENV
          fi

      - name: Update authentication mode
        if: env.update_needed == 'true'
        run: |
          aws eks update-cluster-config --name poly-cluster --access-config authenticationMode=API_AND_CONFIG_MAP

      - name: Update kubeconfig
        run: |
          # Update kubeconfig to use the correct context
          aws eks update-kubeconfig --name poly-cluster

          # Verify the current context
          kubectl config get-contexts
          kubectl config current-context

      - name: Create GitHub access entry if not exists
        run: |
          # Check if the access entry already exists
          ENTRY_EXISTS=$(aws eks list-access-entries --cluster-name poly-cluster --query "entries[?principalArn=='${{ secrets.OIDC_ROLE }}']" --output text)

          if [ -z "$ENTRY_EXISTS" ]; then
            echo "Creating new access entry..."
            aws eks create-access-entry --cluster-name poly-cluster --principal-arn ${{ secrets.OIDC_ROLE }} --username github-actions --kubernetes-groups masters
          else
            echo "Access entry already exists. Skipping creation."
          fi

      - name: Deploy to EKS
        run: |
          kubectl create namespace argocd
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          kubectl apply -f kube_manifest/argo_secret_auth.yaml
          kubectl apply -f kube_manifest/argo_config.yaml

        #- name: Run Terraform
        #  run: |
        #    cd src
        #    terraform init
        #    terraform apply -auto-approve
